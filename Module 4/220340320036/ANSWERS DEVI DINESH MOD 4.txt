/*SECTION 1*/

/*1.	Create table DEPT with the following structure:-
DEPTNO			int(2)
DNAME			varchar(15)
LOC				varchar(10)      */
CREATE TABLE DEPT
(
	DEPTNO INT,
	DNAME VARCHAR(15),
	LOC VARCHAR(10) 
);

INSERT INTO DEPT (DEPTNO, DNAME, LOC) VALUES
(10, 'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30, 'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');
SELECT * FROM DEPT;

OUTPUT----->
		DEPTNO	DNAME		LOC
		10		ACCOUNTING	NEW YORK
		20		RESEARCH	DALLAS
		30		SALES		CHICAGO
		40		OPERATIONS	BOSTON
		
		
==============================================================================================================
/*2.	Create table EMP with the following structure*/
CREATE TABLE EMP
(
	EMPNO INT,
    ENAME VARCHAR(10),
    JOB VARCHAR(9),
    HIREDATE DATE,
    SAL FLOAT,
    COMM FLOAT,
    DEPTNO INT
);
INSERT INTO EMP VALUES
(7839, 'KING', 'MANAGER', '1991-11-17', 5000, NULL, 10),
(7698,	'BLAKE', 'CLERK', '1981-05-01', 2850, NULL, 30),
(7782, 'CLARK', 'MANAGER', '1981-06-09', 2450, NULL, 10),
(7566, 'JONES', 'CLERK', '1981-04-02', 2975, NULL, 20),
(7654, 'MARTIN', 'SALESMAN', '1981-09-28', 1250, 1400, 30),
(7499,	'ALLEN', 'SALESMAN', '1981-02-20', 1600, 300, 30);
SELECT * FROM EMP;

OUTPUT ------>
		EMPNO	ENAME	JOB			HIREDATE	SAL			COMM	DEPTNO
		7839	KING	MANAGER		1991-11-17	5000		NULL	10
		7698	BLAKE	CLERK		1981-05-01	2850		NULL	30
		7782	CLARK	MANAGER		1981-06-09	2450		NULL	10
		7566	JONES	CLERK		1981-04-02	2975		NULL	20
		7654	MARTIN	SALESMAN	1981-09-28	1250		1400	30
		7499	ALLEN	SALESMAN	1981-02-20	1600		300		30
		
	
============================================================================================================
/*3.	Display all the employees where SAL between 2500 and 5000 (inclusive of both).*/
SELECT EMPNO, ENAME, SAL FROM EMP
WHERE SAL BETWEEN 2500 AND 5000;

OUTPUT ----->
		EMPNO	ENAME	SAL
		7839	KING	5000
		7698	BLAKE	2850
		7566	JONES	2975
		
		
============================================================================================================
/*4.	Display all the ENAMEs in descending order of ENAME.*/
SELECT ENAME FROM EMP
ORDER BY ENAME DESC;

OUTPUT----->
		ENAME
		MARTIN
		KING
		JONES
		CLARK
		BLAKE
		ALLEN
	
	
=============================================================================================================
/*5.	Display all the JOBs in lowercase.*/
SELECT LOWER(JOB) AS 'JOBS' FROM EMP;

OUTPUT------>
		JOBS
		manager
		clerk
		manager
		clerk
		salesman
		salesman
		
SELECT DISTINCT LOWER(JOB) AS 'JOBS' FROM EMP;
OUTPUT------>
		JOBS
		manager
		clerk
		salesman
		
		
=============================================================================================================
/*6.	Display the ENAMEs and the lengths of the ENAMEs.*/
SELECT ENAME, LENGTH(ENAME) AS 'NAME LENGTH' FROM EMP
ORDER BY ENAME;

OUTPUT----->
		ENAME	NAME LENGTH
		ALLEN	5
		BLAKE	5
		CLARK	5
		JONES	5
		KING	4
		MARTIN	6
		
		
=============================================================================================================
/*7.	Display the DEPTNO and the count of employees who belong to that DEPTNO .*/
SELECT DEPTNO, COUNT(DEPTNO) AS 'EMP COUNT' FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

OUTPUT----->
		DEPTNO	EMP COUNT
		10		2
		20		1
		30		3
		
		
=============================================================================================================
/*8.	Display the DNAMEs and the ENAMEs who belong to that DNAME.*/
SELECT DNAME, ENAME FROM EMP, DEPT
WHERE DEPT.DEPTNO=EMP.DEPTNO
ORDER BY DNAME, ENAME;

OUTPUT----->
		DNAME		ENAME
		ACCOUNTING	CLARK
		ACCOUNTING	KING
		RESEARCH	JONES
		SALES		ALLEN
		SALES		BLAKE
		SALES		MARTIN


=============================================================================================================
/*9.	Display the position at which the string ‘AR’ occurs in the ename.*/
SELECT ENAME, INSTR(ENAME, 'AR') AS 'POSITION' FROM EMP;

OUTPUT----->
		ENAME		POSITION
		KING		0
		BLAKE		0
		CLARK		3
		JONES		0
		MARTIN	2
		ALLEN		0
		
		
=============================================================================================================
/*10.	Display the HRA for each employee given that HRA is 20% of SAL.*/
SELECT EMPNO, ENAME, SAL*0.2 AS 'HRA' FROM EMP;

OUTPUT------>
		EMPNO		ENAME		HRA
		7839		KING		1000
		7698		BLAKE		570
		7782		CLARK		490
		7566		JONES		595
		7654		MARTIN	250
		7499		ALLEN		320
		
	
=============================================================================================================








/*Section II*/

/*1.	Write a stored procedure by the name of PROC1 that accepts two varchar strings as parameters. 
Your procedure should then determine if the first varchar string exists inside the varchar string. 
For example, if string1 = ‘DAC’ and string2 = ‘CDAC, then string1 exists inside string2.  
The stored procedure should insert the appropriate message into a suitable TEMPP output table. 
Calling program for the stored procedure need not be written.*/



CREATE TABLE TEMPP
(
	STR1 VARCHAR(15),
    STR2 VARCHAR(15),
    REMARK VARCHAR(50)
);
DELIMITER //
CREATE PROCEDURE PROC1(STR1 VARCHAR(15), STR2 VARCHAR(15))
BEGIN
	DECLARE POS INT;
    SET POS=INSTR(STR2, STR1);
    IF POS=0 THEN
		INSERT INTO TEMPP VALUES (STR1, STR2, CONCAT(STR1, ' NOT FOUND IN ',STR2));
	ELSE
		INSERT INTO TEMPP VALUES (STR1, STR2, CONCAT(STR1, ' FOUND IN ',STR2,' AT POSITION ', POS));
    END IF;
END; //
DELIMITER ;

CALL PROC1('DAC', 'CDAC');
CALL PROC1('BHAVYA', 'DEVI DINESH');
CALL PROC1('DEVI', 'DEVI DINESH');
SELECT * FROM TEMPP;

OUTPUT----->
		STR1		STR2			REMARK
		DAC		CDAC			DAC FOUND IN CDAC AT POSITION 2
		BHAVYA	DEVI DINESH		BHAVYA NOT FOUND IN DEVI DINESH
		DEVI		DEVI DINESH		DEVI FOUND IN DEVI DINESH AT POSITION 1



=============================================================================================================
/*2.	Create a stored function by the name of FUNC1 to take three parameters, the sides of a triangle. 
The function should return a Boolean value:- TRUE if the triangle is valid, FALSE otherwise. 
A triangle is valid if the length of each side is less than the sum of the lengths of the other two sides. 
Check if the dimensions entered can form a valid triangle. Calling program for the stored function need not be written.*/



CREATE TABLE TEMPP2
(
	SIDES VARCHAR(15),
    REMARK VARCHAR(50)
);

DELIMITER //
CREATE FUNCTION FUNC1(X FLOAT, Y FLOAT, Z FLOAT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    IF ( (X+Y)>Z AND (Y+Z)>X AND (Z+X)>Y) THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
    END IF;
END; //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CALLING_PROC(X FLOAT, Y FLOAT, Z FLOAT)
BEGIN
	DECLARE CON BOOLEAN;
    SET CON=FUNC1(X, Y, Z);
    IF (CON=TRUE) THEN
		INSERT INTO TEMPP2 VALUES (CONCAT(X,', ',Y,', ', Z), 'FORMS A VAID TRIANGLE');
	ELSE
		INSERT INTO TEMPP2 VALUES (CONCAT(X,', ',Y,', ', Z), 'DOES NOT FORM A VAID TRIANGLE');
    END IF;
END; //
DELIMITER ;

CALL CALLING_PROC(1,2,3);
CALL CALLING_PROC(3,4,5);
SELECT * FROM TEMPP2;


OUTPUT------> 
		SIDES			REMARK
		1, 2, 3		DOES NOT FORM A VAID TRIANGLE
		3, 4, 5		FORMS A VAID TRIANGLE
=============================================================================================================
